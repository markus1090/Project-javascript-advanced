(()=>{let e=[{a:0,b:"#cccccc",f:"#ffffff"},{a:50,b:"#009966",f:"#ffffff"},{a:100,b:"#ffde33",f:"#000000"},{a:150,b:"#ff9933",f:"#000000"},{a:200,b:"#cc0033",f:"#ffffff"},{a:300,b:"#660099",f:"#ffffff"},{a:500,b:"#7e0023",f:"#ffffff"}],t=new class{constructor(e){this.name=e}componentGeo(){let e=document.createElement("DIV");e.classList.add("divGeo"),e.innerHTML="Get station closer:";let t=document.createElement("BUTTON");return t.setAttribute("id","position"),t.textContent="Position",e.appendChild(t),e}success(e){let a=e.coords;!async function(){try{let e="https://api.waqi.info/feed/geo:"+a.latitude+";"+a.longitude+"/?token=20482dc6f3de69576db86cc011ac7d405a7d5c4b",o=await fetch(e),d=await o.json();console.log(d),t.showGeo(d)}catch(e){console.log("error"+e)}}()}showGeo(e){document.getElementById("position").onclick=function(){let a=document.getElementById("show");a.innerHTML="";let o=document.createElement("table");o.setAttribute("id","tableGeo");let d=document.createElement("tbody");d.setAttribute("id","tableBodyGeo"),o.appendChild(d),a.appendChild(o);let n=["Aqui","Date","Time","Name Station","Longitude","Latitude"],i=[_.get(e,["data","aqi"]),_.get(e,["data","time","s"]),_.get(e,["data","time","tz"]),_.get(e,["data","city","name"]),_.get(e,["data","city","geo",0]),_.get(e,["data","city","geo",1])];for(let e=0;e<n.length;e++){let a=document.createElement("tr"),o=document.createElement("th"),d=document.createTextNode(n[e]);o.appendChild(d),a.appendChild(o);let c=document.createElement("td");0==e&&t.checkColor(i[0],c);let l=document.createTextNode(i[e]);c.appendChild(l),a.appendChild(c),document.getElementById("tableBodyGeo").appendChild(a)}t.generateTableIaqi(e)}}generateTableIaqi(e){let a=document.createElement("table");a.setAttribute("id","tableGeo2");let o=document.createElement("tbody");o.setAttribute("id","tableBodyGeo2"),a.appendChild(o),show.appendChild(a);let d=["Carbon Monoxyde","Relative Humidity","Nitrogen Dioxide","Ozone","Atmostpheric Pressure","PM10","PM25","Sulphur Dioxide","Temperature","Wind"],n=[_.get(e,["data","iaqi","co","v"]),_.get(e,["data","iaqi","h","v"]),_.get(e,["data","iaqi","no2","v"]),_.get(e,["data","iaqi","o3","v"]),_.get(e,["data","iaqi","p","v"]),_.get(e,["data","iaqi","pm10","v"]),_.get(e,["data","iaqi","pm25","v"]),_.get(e,["data","iaqi","so2","v"]),_.get(e,["data","iaqi","t","v"]),_.get(e,["data","iaqi","w","v"])];for(let e=0;e<d.length;e++){let a=document.createElement("tr"),o=document.createElement("th"),i=document.createTextNode(d[e]);o.appendChild(i),a.appendChild(o);let c=document.createElement("td");0!=e&&2!=e&&3!=e&&5!=e&&6!=e&&7!=e||t.checkColor(n[e],c);let l=document.createTextNode(n[e]);c.appendChild(l),a.appendChild(c),document.getElementById("tableBodyGeo2").appendChild(a)}}checkColor(t,a){if("-"==t)return;let o=Number(t);for(let t=0;t<e.length;t++)if(o<=e[t].a){a.style.backgroundColor=e[t].b,a.style.color=e[t].f;break}}error(e){console.warn(`ERROR(${e.code}): ${e.message}`)}}("structureGeo");document.getElementById("content").appendChild(t.componentGeo()),navigator.geolocation.getCurrentPosition(t.success,t.error,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,